(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{61:function(e,t,i){"use strict";i.r(t);var n=i(0),a=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"minimal-distance-of-linear-codes"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#minimal-distance-of-linear-codes","aria-hidden":"true"}},[e._v("#")]),e._v(" Minimal Distance of Linear Codes")]),i("p",[e._v("Apart from the trivial way to determine the minimal distance of a code (which is listing the entire codebook and comparing all the codeword pairs), there is a much faster way if the code is linear. It turns out that it already suffices to consider just the Hamming weights of the (nonzero) codewords:")]),i("div",{staticClass:"content-box pad-box-mini border border-trbl border-round"},[i("h4",{staticStyle:{color:"#bc0031"}},[i("strong",[e._v("Proposition")])]),e._v("\nFor a linear code \\(C\\), the minimal distance is equal to the minimal weight of the nonzero codewords.\n"),i("p",[i("span",{staticClass:"element_toggler",attrs:{role:"button","aria-controls":"group1","aria-label":"Toggler","aria-expanded":"false"}},[i("span",{staticClass:"Button"},[e._v("Proof")])])]),i("div",{attrs:{id:"group1"}},[i("div",{staticClass:"content-box"},[e._v("The following derivation proves the claim: \\begin{align} d_{\\min} &= \\min_{\\stackrel{x,y \\in C}{x \\neq y}} d(x,y) = \\min_{\\stackrel{x,y \\in C}{x \\neq y}} \\sum_{i=1}^n |x_i - y_i| = \\min_{\\stackrel{x,y \\in C}{x \\neq y}} d(x-y,0) = \\min_{\\stackrel{z \\in C}{z \\neq 0}} d(z,0) = \\min_{\\stackrel{z \\in C}{z \\neq 0}} |z| \\, , \\end{align}\nwhere |z| denotes the "),i("a",{attrs:{href:"https://en.wikipedia.org/wiki/Hamming_weight"}},[e._v("Hamming weight ")]),e._v(" of a string z.\n")])])]),i("p",[e._v("An equivalent way to determine the minimal distance of a linear code is possible if the parity check matrix is known.")]),i("div",{staticClass:"content-box pad-box-mini border border-trbl border-round"},[i("h4",{staticStyle:{color:"#bc0031"}},[i("strong",[e._v("Proposition")])]),e._v("\nFor a linear code \\(C\\) with parity check matrix \\(H\\), the minimal distance \\(d_{\\min}\\) equals the minimum number of columns of \\(H\\) that are "),i("a",{attrs:{href:"https://en.wikipedia.org/wiki/Linear_independence"}},[e._v("linearly dependent")]),e._v(".\n"),i("p",[i("span",{staticClass:"element_toggler",attrs:{role:"button","aria-controls":"group6","aria-label":"Toggler","aria-expanded":"false"}},[i("span",{staticClass:"Button"},[e._v("Proof")])])]),i("div",{attrs:{id:"group6"}},[i("div",{staticClass:"content-box"},[e._v("Left as an exercise.")])])])])}],!1,null,null,null);a.options.__file="README.md";t.default=a.exports}}]);