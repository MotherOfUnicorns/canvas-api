(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{59:function(t,e,n){"use strict";n.r(e);var i=n(0),s=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"introduction-noise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction-noise","aria-hidden":"true"}},[this._v("#")]),this._v(" Introduction: Noise")]),e("p",[this._v("In Module 3, we saw how to encode information from a source such that it can be stored or sent over some channel, and decoded at a later point in time. We assumed that the channel used to send the encoded information was perfect, meaning that no information got altered or lost while being sent over the channel. In this chapter, we consider a different setting, where the channel possibly contains some "),e("span",{staticStyle:{color:"#bc0031"}},[e("strong",[this._v("noise")])]),this._v(", that may convert the channel input \\(x\\) to some potentially different value \\(y\\):")]),e("p",[e("img",{staticStyle:{display:"block","margin-left":"auto","margin-right":"auto"},attrs:{src:"https://canvas.uva.nl/courses/2205/files/218089/preview?verifier=AyqxNP76Ytlo8HIVk54Mo6yALxKifyrvHxF9qXQs",alt:"An encoding function, a channel, and a decoding function",width:"706",height:"115","data-api-endpoint":"https://canvas.uva.nl/api/v1/courses/2205/files/218089","data-api-returntype":"File"}})]),e("p",[this._v("The goal is to design encoding and decoding functions that can resist this noise, so that the recovered message \\(\\tilde{W}\\) is as close as possible to the original message \\(w\\). The question is how short (efficient) such codes can be while still providing resistance to noise.")])])}],!1,null,null,null);s.options.__file="README.md";e.default=s.exports}}]);